{"version":3,"sources":["fbase.js","Routes/Auth.js","Routes/CreateAccount.js","Components/Quote.js","Routes/Home.js","Components/favoriteAuthorEdit.js","Components/MyQuotes.js","Routes/MyProfile.js","Components/UserQuotes.js","Routes/Profile.js","Components/Navigation.js","Components/Router.js","Components/App.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firebaseInstance","authService","auth","db","firestore","Auth","useState","email","setEmail","password","setPassword","signInError","setSignInError","onChange","event","target","name","value","onSubmit","a","preventDefault","signInWithEmailAndPassword","message","console","log","onSocialClick","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","then","result","user","credential","error","code","fetchSignInMethodsForEmail","providers","userUid","currentUser","uid","displayName","collection","doc","set","className","type","placeholder","required","onClick","to","CreateAccount","setError","createUserWithEmailAndPassword","Quote","quoteObj","userObj","editMode","setEditMode","quote","newQuote","setNewQuote","author","newAuthor","setNewAuthor","title","newTitle","setNewTitle","onDetailChange","onUpdateSubmit","id","update","updatedAt","Date","now","onDeleteQuoteClick","window","confirm","delete","html","creatorId","createdBy","moment","createdAt","format","disabled","page","comment","prev","Home","profiles","setQuote","setAuthor","setTitle","quotes","setQuotes","setPage","setComment","setProfiles","useEffect","orderBy","onSnapshot","snapshot","quotesArr","docs","map","data","add","maxLength","qt","FavoriteAuthorEdit","favAuthorObj","authorListEditMode","editedFavAuthor","setEditedFavAuthor","onDeleteAuthorClick","onSubmitEditedFavAuthor","favoriteAuthor","MyQuotes","myquotes","setMyQuotes","getQuotes","where","shot","MyProfile","setDisplayName","favAuthor","setFavAuthor","favAuthors","setFavAuthors","setAuthorListEditMode","getFavAuthors","favAuthorsArr","updateAuthProfile","updateProfile","updateProfileName","get","response","batch","forEach","docRef","commit","updateQuoteCreatorName","onSubmitFavAuthor","history","useHistory","toggleEditAuthorList","signOut","push","UserQuotes","profile","Profile","favWriters","setFavWriters","getProfile","writersdb","writer","Navigation","AppRouter","isLoggedIn","path","exact","from","App","init","setInit","setIsLoggedIn","setUserObj","getProfiles","profilesDb","onAuthStateChanged","getFullYear","rel","href","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.244cc723.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\n\n\nvar firebaseConfig = {\n  apiKey: \"AIzaSyAef8qIjnu82MunJScf7VzoLq1F2bm9YQo\",\n  authDomain: \"quotes-6d35f.firebaseapp.com\",\n  databaseURL: \"https://quotes-6d35f.firebaseio.com\",\n  projectId: \"quotes-6d35f\",\n  storageBucket: \"quotes-6d35f.appspot.com\",\n  messagingSenderId: \"419429076627\",\n  appId: \"1:419429076627:web:b624052634b1dbdf980766\",\n  measurementId: \"G-H46M93ZX50\"\n};\nfirebase.initializeApp(firebaseConfig);\nexport const firebaseInstance = firebase;\nexport const authService = firebase.auth();\nexport const db = firebase.firestore()","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { authService, db, firebaseInstance } from \"../fbase\";\n\nconst Auth = () => {\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [signInError, setSignInError] = useState(\"\");\n    const onChange = (event) => {\n        const { target: { name, value } } = event;\n        if (name === \"email\") {\n            setEmail(value)\n        } else if (name === \"password\") {\n            setPassword(value)\n        }\n    }\n    const onSubmit = async (event) => {\n        try {\n            event.preventDefault();\n            await authService.signInWithEmailAndPassword(\n                email, password)\n        } catch (error) {\n            setSignInError(error.message);\n            console.log(error.message);\n        }\n    }\n    const onSocialClick = async (event) => {\n        const { target: { name } } = event;\n        let provider;\n        if (name === \"google\") {\n            provider = new firebaseInstance.auth.GoogleAuthProvider();\n        } else if (name === \"github\") {\n            provider = new firebaseInstance.auth.GithubAuthProvider();\n\n        }\n        await authService.signInWithPopup(provider).then((result) => {\n            const user = result.user;\n            const credential = result.credential;\n        }, (error) => {\n            const email = error.email;\n            const credential = error.credential;\n            if (error.code === 'auth/account-exists-with-different-credential') {\n                authService.fetchSignInMethodsForEmail(email).then((providers) => { })\n            }\n        })\n        const userUid = authService.currentUser.uid;\n        const displayName = authService.currentUser.displayName;\n        const email = authService.currentUser.email;\n        await db.collection('profiles').doc(userUid).set({\n            email, userUid, displayName,\n        })\n    }\n    return (\n        <div className=\"landing\">\n            <div className=\"landingpage\">\n                <h4>\"Sometimes <br /> the Books <br /> Speak for you\"</h4>\n            </div>\n            <div className=\"auth-form\">\n                <form className=\"container\" onSubmit={onSubmit}>\n                    <input\n                        className=\"auth-form-1 row\"\n                        onChange={onChange}\n                        name=\"email\" type=\"email\" placeholder=\"Email\"\n                        value={email} required />\n                    <div className=\"auth-form-2 row\">\n                        <input\n                            onChange={onChange}\n                            name=\"password\"\n                            type=\"password\" placeholder=\"Password\"\n                            value={password} required />\n                        <input type=\"submit\" value=\"Sign In\" />\n                    </div>\n                </form>\n                <div className=\"create-acc-btns\">\n                \n                <button onClick={onSocialClick} name=\"google\">Continue with Google</button>\n                <button onClick={onSocialClick} name=\"github\">Continue with Github</button>\n                <Link to=\"/createaccount\">\n                    <input type=\"submit\" value=\" Sign Up with Email \" />\n                </Link>\n                </div>\n                <h3>{signInError}</h3>\n            </div>\n        </div>\n    )\n}\nexport default Auth;","import React, { useState } from \"react\";\nimport { authService, db} from \"../fbase\";\n\nconst CreateAccount = () => {\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [error, setError] = useState(\"\");\n    const onChange = (event) => {\n        const { target: { name, value } } = event;\n        if (name === \"email\") {\n            setEmail(value)\n        } else if (name === \"password\") {\n            setPassword(value)\n        }\n    }\n    const onSubmit = async (event) => {\n        try {\n            event.preventDefault();\n            await authService.createUserWithEmailAndPassword(\n                email, password\n            )\n            const userUid = authService.currentUser.uid;\n            await db.collection('profiles').doc(userUid).set({\n                email, userUid,\n                displayName: email,\n            })\n        } catch (error) {\n            setError(error.message)\n            console.log(error)\n        }\n    }\n    return (\n        <div>\n            <form onSubmit={onSubmit}>\n                <input\n                    onChange={onChange}\n                    name=\"email\" type=\"email\" placeholder=\"Email\"\n                    value={email} required />\n                <input\n                    onChange={onChange}\n                    name=\"password\"\n                    type=\"password\" placeholder=\"Password\"\n                    value={password} required />\n                <br /><input type=\"submit\" value=\"Create New Account\" />\n                <h3>{error}</h3>\n            </form>\n        </div>\n    )\n};\n\nexport default CreateAccount;","import moment from \"moment\";\nimport React, { useState } from \"react\";\nimport ContentEditable from \"react-contenteditable\";\nimport { Link } from \"react-router-dom\";\nimport { db } from \"../fbase\";\n\nconst Quote = ({ quoteObj, userObj }) => {\n    const [editMode, setEditMode] = useState(false);\n    const [newQuote, setNewQuote] = useState(quoteObj.quote);\n    const [newAuthor, setNewAuthor] = useState(quoteObj.author);\n    const [newTitle, setNewTitle] = useState(quoteObj.title);\n\n    const onQuoteChange = (event) => {\n        const { target: { value } } = event;\n        setNewQuote(value);\n    }\n    const onDetailChange = (event) => {\n        const { target: { value, name } } = event;\n        if (name === \"title\") {\n            setNewTitle(value)\n        } else if (name === \"author\") {\n            setNewAuthor(value)\n        }\n    }\n    const onUpdateSubmit = async (event) => {\n        event.preventDefault();\n        await db.doc(`/quotes/${quoteObj.id}`).update({\n            quote: newQuote,\n            author: newAuthor,\n            title: newTitle,\n            updatedAt: Date.now()\n        })\n        setEditMode(false);\n    }\n    const onUpdateClick = () => {\n        setEditMode(prev => !prev)\n    }\n    const onDeleteQuoteClick = async () => {\n        const conmsg = window.confirm('Are you sure about deleting this quote?')\n        if (conmsg) {\n            await db.doc(`/quotes/${quoteObj.id}`).delete()\n        } else {\n            return;\n        }\n    }\n    return (\n        <div className=\"quotes-list\" key={quoteObj.id} >\n            {editMode ? (<>\n                <form onSubmit={onUpdateSubmit}>\n                    <ContentEditable\n                        onChange={onQuoteChange}\n                        className=\"quote-edit\"\n                        html={newQuote}\n                    />\n                    <input onChange={onDetailChange} value={newAuthor}\n                        type=\"text\" name=\"author\" placeholder=\"AUTHOR\" />\n                    <input onChange={onDetailChange} value={newTitle}\n                        type=\"text\" name=\"title\" placeholder=\"BOOK TITLE\" />\n                    <input type=\"submit\" value=\"Save this Update\" /></form>\n            </>)\n                : (<>\n\n                    { userObj.uid !== quoteObj.creatorId ?\n                        (\n                            <Link className=\"link\" to={`/${quoteObj.creatorId}`}>\n                                <h4>{quoteObj.createdBy}</h4>\n                            </Link>\n                        ) : (<Link className=\"link\" to=\"/profile\">\n                            <h4>{quoteObj.createdBy}</h4>\n                        </Link>\n                        )}\n\n                    <p id=\"created-at\">{moment(quoteObj.createdAt).format('LL')}</p>\n                    <ContentEditable\n                        className=\"quote-content\"\n                        html={quoteObj.quote}\n                        disabled={true}\n                    />\n                    <div className=\"quote-origin\">\n                        <p id=\"quote-author\">{quoteObj.author}, </p>\n                        <p>『{quoteObj.title}』</p>\n                        <p>p. {quoteObj.page}</p>\n                    </div>\n                    <div className=\"comment-section\">\n                        <p>{quoteObj.comment}</p>\n                    </div>\n                    {userObj.uid === quoteObj.creatorId &&\n                        (<div className=\"quote-buttons\"><button\n                            onClick={onUpdateClick}>Update</button>\n                            <button\n                                onClick={onDeleteQuoteClick}> Delete</button>\n                        </div>)}\n                </>)}\n        </div>\n    )\n}\n\nexport default Quote;","import React, { useEffect, useState } from \"react\";\nimport { authService, db } from \"../fbase\";\nimport ContentEditable from \"react-contenteditable\";\nimport Quote from \"../Components/Quote\";\n\nconst Home = ({ userObj, profiles }) => {\n    const [quote, setQuote] = useState(\"\");\n    const [author, setAuthor] = useState(\"\");\n    const [title, setTitle] = useState(\"\");\n    const [quotes, setQuotes] = useState([]);\n    const [page, setPage] = useState(\"\");\n    const [comment, setComment] = useState(\"\");\n    const setProfiles = async () => {\n        const userUid = authService.currentUser.uid;\n        const displayName = authService.currentUser.displayName;\n        const email = authService.currentUser.email;\n        await db.collection('profiles').doc(userUid).set({\n            email, userUid, displayName,\n        })\n    }\n    useEffect(() => {\n       setProfiles();\n        // getQuotes();\n        db.collection(\"quotes\").orderBy(\"createdAt\", \"desc\")\n            .onSnapshot((snapshot) => {\n                const quotesArr = snapshot.docs.map((doc) => ({\n                    ...doc.data(),\n                    id: doc.id,\n                }))\n                setQuotes(quotesArr);\n            })\n    }, [])\n    const onInputChange = (event) => {\n        setQuote(event.target.value)\n    }\n    const onChange = (event) => {\n        const { target: { name, value } } = event;\n        if (name === \"author\") {\n            setAuthor(value)\n        } else if (name === \"title\") {\n            setTitle(value)\n        } else if (name === \"page\") {\n            setPage(value)\n        } else if (name === \"comment\") {\n            setComment(value)\n        }\n    }\n    const onSubmit = (event) => {\n        const confmsg = window.confirm('Do you want to post this quote?')\n        if (confmsg) {\n            event.preventDefault();\n            db.collection(\"quotes\").add({\n                quote, author, title, page, comment,\n                createdAt: Date.now(),\n                creatorId: userObj.uid,\n                createdBy: userObj.displayName,\n            })\n            setQuote(\"\");\n            setAuthor(\"\");\n            setTitle(\"\");\n            setPage(\"\");\n            setComment(\"\");\n        } else {\n            return;\n        }\n    }\n    return (\n        <div className=\"container\">\n            <span className=\"share-quotes-label\">📖 Share Your Favorite Quotes 🖋</span>\n            <form onSubmit={onSubmit}>\n                <ContentEditable\n                    className=\"quote-input\"\n                    onChange={onInputChange}\n                    html={quote}\n                />\n                <div className=\"row input-detail\">\n                    <input className=\"col-xs-6 col-md-3\" id=\"author-input\" onChange={onChange} value={author}\n                        type=\"text\" name=\"author\" placeholder=\"AUTHOR\" />\n                    <input className=\"col-xs-8 col-md-6\" id=\"title-input\" onChange={onChange} value={title}\n                        type=\"text\" name=\"title\" placeholder=\"BOOK TITLE\" />\n                    <input className=\"col-xs-4 col-md-2\" id=\"page-input\" onChange={onChange} value={page}\n                        type=\"text\" name=\"page\" placeholder=\"PAGE\"/>\n                </div>\n                <br />\n                <div className=\"row input-personal\">\n                    <input className=\"col-xs-12 col-md-10\" id=\"comment-input\" onChange={onChange} type=\"text\" placeholder=\"COMMENT\"\n                        name=\"comment\" value={comment} maxLength={140} />\n                    <input className=\"col-xs-6 col-md-1\" id=\"quote-submit\" type=\"submit\" value=\"post\" />\n                </div>\n            </form>\n            <div className=\"row\">\n                {quotes.map((qt) => (\n                    <Quote key={qt.id} quoteObj={qt} userObj={userObj} />\n                ))}\n            </div>\n        </div>\n    )\n}\n\nexport default Home;\n\n\n/* **OLD VERSION AND RE RENDER SEVERL TIMES\n   const getQuotes = async () => {\n       const quotesdb = await db.collection(\"quotes\")\n           .orderBy(\"createdAt\", \"asc\")\n           .get();\n       quotesdb.forEach((document) => {\n           const quoteObj = {\n               ...document.data(),\n               id: document.id,\n           }\n           setQuotes((prev) => [quoteObj, ...prev]);\n       });\n   }\n   USING ON SNAP SHOT RENDDERS ONLY ONE TIME and it makes page faster and it funcions in realtime!!.*/","import React, { useState } from \"react\";\nimport { db } from \"../fbase\";\n\nconst FavoriteAuthorEdit = ({ favAuthorObj, authorListEditMode }) => {\n    const [editedFavAuthor, setEditedFavAuthor] = useState(\"\");\n    const onChange = (event) => {\n        const { target: { value } } = event;\n        setEditedFavAuthor(value);\n    }\n\n    const onDeleteAuthorClick = async () => {\n        await db.doc(`fav-author/${favAuthorObj.id}`).delete()\n    }\n    const onSubmitEditedFavAuthor = async (event) => {\n        await db.doc(`fav-author/${favAuthorObj.id}`).update({\n            favoriteAuthor: editedFavAuthor,\n            updatedAt: Date.now(),\n        })\n        setEditedFavAuthor(\"\")\n        const authorListEditModeChange = (authorListEditMode) => !authorListEditMode\n    }\n    return (\n        <div className=\"profile-fav-author\">\n            {!authorListEditMode &&\n                <ul id=\"fav-author-list\">\n                    <li>{favAuthorObj.favoriteAuthor}</li>\n                </ul>}\n            {authorListEditMode &&\n                (<form onSubmit={onSubmitEditedFavAuthor}>\n                    <input onChange={onChange} value={editedFavAuthor} type=\"text\"\n                        placeholder={favAuthorObj.favoriteAuthor} />\n                    <input type=\"submit\" value=\"submit change\" />\n                    <button id=\"delete-fav-author\" onClick={onDeleteAuthorClick}>Delete</button>\n                </form>\n                )\n            }\n        </div>\n    )\n}\n\nexport default FavoriteAuthorEdit","import React, { useEffect, useState } from \"react\";\nimport { db } from \"../fbase\";\nimport moment from \"moment\";\nimport ContentEditable from \"react-contenteditable\";\nimport { useRouteMatch } from \"react-router-dom\";\n\n\nconst MyQuotes = ({ userObj }) => {\n    const [myquotes, setMyQuotes] = useState([]);\n    const getQuotes = async () => {\n        await db.collection('quotes')\n            .where(\"creatorId\", \"==\", userObj.uid)\n            .orderBy(\"createdAt\")\n            .onSnapshot((shot) => {\n                const quotesArr = shot.docs.map((doc) => ({\n                    ...doc.data(),\n                    id: doc.id\n                }\n                ))\n                setMyQuotes(quotesArr);\n            })\n    }\n\n    useEffect(() => {\n        getQuotes()\n    })\n    return (\n        <div className =\"profile-quote-list\">\n            <ul>\n                {myquotes.map((quote) => (\n                    <li key={quote.id}>\n                        <p className=\"profile-created-at\">{moment(quote.createdAt).format('LL')}</p>\n                        <ContentEditable\n                            className=\"profile-quote-content\"\n                            html={quote.quote}\n                            disabled={true}\n                        />\n                        <div className=\"profile-quote-origin\">\n                            <p className=\"profile-quote-author\">{quote.author}, </p>\n                            <p>『{quote.title}』</p>\n                            <p>p. {quote.page}</p>\n                        </div>\n                        <div className=\"comment-section\">\n                            <p>{quote.comment}</p>\n                        </div>\n\n                    </li>\n                ))}\n            </ul>\n        </div>\n    )\n}\n\nexport default MyQuotes","import React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport FavoriteAuthorEdit from \"../Components/favoriteAuthorEdit\";\nimport MyQuotes from \"../Components/MyQuotes\";\nimport { authService, db } from \"../fbase\";\n\nconst MyProfile = ({ userObj }) => {\n    const [displayName, setDisplayName] = useState(userObj.displayName);\n    const [favAuthor, setFavAuthor] = useState(\"\");\n    const [favAuthors, setFavAuthors] = useState([]);\n    const [authorListEditMode, setAuthorListEditMode] = useState(false);\n\n    const getFavAuthors = async () => {\n        await db.collection('fav-author')\n            .where(\"creatorId\", \"==\", authService.currentUser.uid)\n            .orderBy(\"createdAt\")\n            .onSnapshot((shot) => {\n                const favAuthorsArr = shot.docs.map((doc) => ({\n                    ...doc.data(),\n                    id: doc.id\n                }\n                ))\n                setFavAuthors(favAuthorsArr)\n            })\n    }\n    useEffect(() => {\n        getFavAuthors();\n    }, [])\n    const onChange = (event) => {\n        const { target: { name, value } } = event;\n        if (name === \"displayname\") {\n            setDisplayName(value)\n        }\n    }\n    const updateAuthProfile = async () => {\n        await authService.currentUser\n            .updateProfile({\n                displayName,\n            })\n    }\n    const updateProfileName = async () => {\n         db.collection('profiles').where('userUid', \"==\", userObj.uid)\n            .get().then(response => {\n                let batch = db.batch()\n                response.docs.forEach((doc) => {\n                    const docRef = db.collection('profiles').doc(doc.id)\n                    batch.update(docRef, {\n                        displayName,\n                    })\n                })\n                batch.commit().then(() => {\n                    console.log(`updated profile displayName done`)\n                })\n            })\n    }\n    const updateQuoteCreatorName = async () => {\n        db.collection('quotes').where('creatorId', \"==\", userObj.uid)\n            .get().then(response => {\n                let batch = db.batch()\n                response.docs.forEach((doc) => {\n                    const docRef = db.collection('quotes').doc(doc.id)\n                    batch.update(docRef, {\n                        createdBy: displayName,\n                    })\n                })\n                batch.commit().then(() => {\n                    console.log(`updated quotes done`)\n                })\n            })\n    }\n    const onProfileSubmit = (event) => {\n        updateAuthProfile();\n        updateProfileName();\n        updateQuoteCreatorName();\n    }\n    const handleFavAuthorChange = (event) => {\n        const { target: { value } } = event;\n        setFavAuthor(value);\n    }\n    const onSubmitFavAuthor = async (event) => {\n        event.preventDefault();\n        await db.collection('fav-author').add({\n            favoriteAuthor: favAuthor,\n            creatorId: userObj.uid,\n            createdAt: Date.now(),\n        })\n    }\n    const history = useHistory();\n    const onSignOutClick = () => {\n        authService.signOut();\n        history.push(\"/\")\n    }\n    const toggleEditAuthorList = () => {\n        setAuthorListEditMode(prev => !prev)\n    }\n\n    return (\n        <div>\n            <h4 className=\"user-name\">{userObj.displayName}'s profile page</h4>\n            <div className=\"box\">\n                <div className=\"profile-fav-author\">\n                    <h5 className=\"fav-authors\">My Favorite Writers</h5>\n\n                    {favAuthors.map((author) =>\n                        <FavoriteAuthorEdit key={author.id} favAuthorObj={author} authorListEditMode={authorListEditMode} />\n                    )}\n                    {authorListEditMode ?\n                        <div className=\"container\">\n                            <form className=\"row\" >\n                                <input\n                                    onChange={handleFavAuthorChange}\n                                    type=\"text\" name=\"favorite-author\" value={favAuthor} placeholder=\"Add a favorite author\" />\n                                <input onClick={onSubmitFavAuthor} type=\"submit\" value=\"Submit\" />\n                            </form>\n                            <button className=\"fav-author-edit-btn row\" onClick={toggleEditAuthorList}>Edit Done</button>\n                        </div> :\n                        <button className=\"fav-author-edit-btn\" onClick={toggleEditAuthorList}>Edit List</button>}\n                </div>\n                <div className=\"profile-quotes\">\n                    <h5>{userObj.displayName}'s quotes collection</h5>\n                    <MyQuotes userObj={userObj} />\n                </div>\n            </div>\n            <form onSubmit={onProfileSubmit} className=\"profile-edit row\">\n                <input type=\"text\" onChange={onChange}\n                    value={displayName} name=\"displayname\"\n                    placeholder=\"User Name\" maxLength=\"10\" />\n                <br />\n                <input id=\"username-update-btn\" type=\"submit\" value=\"Update Username\" />\n            </form>\n\n            <br />\n            <button id=\"sign-out\" onClick={onSignOutClick} >Sign Out</button>\n        </div>\n    )\n}\nexport default MyProfile;","import React, { useEffect, useState } from \"react\";\nimport { db } from \"../fbase\";\nimport moment from \"moment\";\nimport ContentEditable from \"react-contenteditable\";\n\n\nconst UserQuotes = ({ profile }) => {\n    const [myquotes, setMyQuotes] = useState([]);\n    const getQuotes = async () => {\n        await db.collection('quotes')\n            .orderBy(\"createdAt\")\n            .onSnapshot((shot) => {\n                const quotesArr = shot.docs.map((doc) => ({\n                    ...doc.data(),\n                    id: doc.id\n                }\n                ))\n                setMyQuotes(quotesArr);\n            })\n    }\n\n    useEffect(() => {\n        getQuotes()\n    })\n    return (\n        <div className =\"profile-quote-list\">\n            <ul>\n                {myquotes.map((quote) => (\n                    <li key={quote.id}>\n\n                        {quote.creatorId === profile.userUid && (<>\n                            <p className=\"profile-created-at\">{moment(quote.createdAt).format('LL')}</p>\n                            <ContentEditable\n                                className=\"profile-quote-content\"\n                                html={quote.quote}\n                                disabled={true}\n                            />\n                            <div className=\"profile-quote-origin\">\n                                <p className=\"profile-quote-author\">{quote.author}, </p>\n                                <p>『{quote.title}』</p>\n                                <p>p. {quote.page}</p>\n                            </div>\n                            <div className=\"comment-section\">\n                                <p>{quote.comment}</p>\n                            </div></>)}\n\n                    </li>\n                ))}\n            </ul>\n        </div>\n    )\n}\n\nexport default UserQuotes","import React, { useEffect, useState } from \"react\";\nimport UserQuotes from \"../Components/UserQuotes\";\nimport { db } from \"../fbase\";\n\nconst Profile = ({ profile, userObj }) => {\n    const [favWriters, setFavWriters] = useState([]);\n    const getProfile = async () => {\n        await db.collection('fav-author')\n            .where(\"creatorId\", \"==\", profile.id)\n            .orderBy(\"createdAt\")\n            .onSnapshot((shot) => {\n                const writersdb = shot.docs.map((doc) => ({\n                    ...doc.data(),\n                    id: doc.id\n                }\n                ))\n                setFavWriters(writersdb)\n            })\n    }\n    useEffect(() => {\n        getProfile();\n    }, [])\n    return (\n        <div>\n            <h4 className=\"user-name\">{profile.displayName}'s profile page</h4>\n\n            <div className=\"box\">\n                <div className=\"profile-fav-author\">\n                    <div>\n                        <h5 className=\"fav-authors\">{profile.displayName}'s Favorite Writers</h5>\n                        <ul>\n                            {favWriters.map(writer => (\n                                <li key={writer.id}>{writer.favoriteAuthor}</li>\n                            ))\n                            }\n                        </ul>\n                    </div>\n                </div>\n                <div className=\"profile-quotes\">\n                    <h5>{profile.displayName}'s quotes collection</h5>\n                        <UserQuotes profile={profile}/>\n                </div>\n            </div>\n        </div>\n    )\n}\nexport default Profile;","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Navigation = () => {\n    return (\n        <ul className=\"navigation\">\n            <li><Link className=\"link\" to=\"/\">Home</Link></li>\n            <li><Link className=\"link\" to=\"/profile\" >MyProfile</Link></li>\n        </ul>\n    )\n\n}\n\nexport default Navigation;","import React, { useState } from \"react\";\nimport { HashRouter as Router, Redirect, Route, Switch } from \"react-router-dom\";\nimport Auth from \"../Routes/Auth\";\nimport CreateAccount from \"../Routes/CreateAccount\";\nimport Home from \"../Routes/Home\";\nimport MyProfile from \"../Routes/MyProfile\";\nimport Profile from \"../Routes/Profile\";\nimport Navigation from \"./Navigation\";\n\nconst AppRouter = ({ profiles, isLoggedIn, userObj }) => {\n    const profile = profiles.map((profile) => (\n        <Route key={profile.id} path={`/${profile.id}`}>\n            <Profile profile={profile} userObj={userObj}/>\n        </Route>\n    ))\n\n    return (\n        <Router>\n            {isLoggedIn && <Navigation userObj={userObj} />}\n            <Switch>\n                {isLoggedIn ? (\n                    <>\n                        <Route exact path=\"/\">\n                            <Home \n                            userObj={userObj}\n                            profiles={profiles} />\n                        </Route>\n                        {profile}\n                        {/* <Route >\n                            <Profile />\n                        </Route> */}\n\n                        <Route exact path=\"/profile\">\n                            <MyProfile userObj={userObj} />\n                        </Route>\n                        {/* <Redirect from=\"*\" to=\"/\" /> */}\n                    </>) : (<>\n                        <Route exact path=\"/\">\n                            <Auth />\n                        </Route>\n                        <Route exact path=\"/createaccount\">\n                            <CreateAccount />\n                        </Route>\n                        <Redirect from=\"*\" to=\"/\" />\n                    </>)}\n            </Switch>\n        </Router>\n    )\n}\n\nexport default AppRouter;","import React, { useEffect, useState } from \"react\";\nimport AppRouter from \"./Router\";\nimport { authService, db } from \"../fbase\";\n\nconst App = () => {\n  const [init, setInit] = useState(false);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [userObj, setUserObj] = useState(null);\n  const [profiles, setProfiles] = useState([]);\n  const getProfiles = async() => {\n    await db.collection(\"profiles\")\n            .onSnapshot((snapshot) => {\n                const profilesDb = snapshot.docs.map((doc) => ({\n                    ...doc.data(),\n                    id: doc.id,\n                }))\n                setProfiles(profilesDb);\n            })\n  }\n  useEffect(() => {\n    authService.onAuthStateChanged((user) => {\n      if (user) {\n        setIsLoggedIn(true);\n        setUserObj(user);\n      } else {\n        setIsLoggedIn(false)\n      }\n      setInit(true);\n    });\n    getProfiles()\n  }\n  , []);\n\n  return (\n    <div className=\"container\">\n      <h1 className=\"appTitle\">\"Quotes\"</h1>\n      {init ? <AppRouter profiles={profiles} userObj={userObj} isLoggedIn={isLoggedIn} /> : \"Inizializing\"}\n      <footer>\n        &copy;\"Quotes\" {new Date().getFullYear()}\n        <br/>by <a target=\"_blank\" rel=\"noreferrer\" href=\"https://github.com/poianakim\">POIANA KIM</a>\n      </footer>\n    </div>\n  )\n\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Components/App';\nimport \"./styles.css\"\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}